Test= pd.read_csv('../input/big-mart-sales-prediction/Test.csv')
Test.shape
Train=pd.read_csv('../input/big-mart-sales-prediction/Train.csv')
Train.shape
data=pd.concat([Train,Test],ignore_index=True)
data.columns
sns.distplot(data['Item_Outlet_Sales'])
print('skewnes:',data['Item_Outlet_Sales'].skew())
print('kurtosis:',data['Item_Outlet_Sales'].kurt())
data.dtypes
data.isna().sum()

data=data.fillna({'Item_Weight':  data['Item_Weight'].mean(),'Outlet_Size':data.loc[:,'Outlet_Size'].value_counts().index[0],
          'Item_Outlet_Sales':0   })
categorical_data= data.select_dtypes(include=[object])
categorical_data.columns
continuous_data=data.select_dtypes(include=[np.float64]+[np.int64])
continuous_data.columns
data.iloc[:,[2]].value_counts()
data.iloc[:,2]=data.iloc[:,[2]].replace({'LF':'Low Fat','low fat' :'Low Fat'  })
data.iloc[:,[2]].value_counts()
data['itemidentifernew']=data.iloc[:,0].str[0:2]
data['itemidentifernew'].value_counts()



plt.figure
sns.set(style='ticks')
sns.pairplot(continuous_data )



#plt.figure(figsize=(15,9))

#sns.boxplot(x='Item_Fat_Content',y='Item_Outlet_Sales',data=data)
#plt.figure(figsize=(15,9))
#sns.boxplot(x='itemidentifernew',y='Item_Outlet_Sales',data=data)


#plt.figure(figsize=(20,9))
#sns.boxplot(x='Item_Type',y='Item_Outlet_Sales',data=data)


#from sklearn.preprocessing import LabelEncoder 
#le= LabelEncoder()
#x=data.dtypes
#datan=data.drop('Item_Outlet_Sales',axis=1)
#for i in datan:
   # if x[i] == object:
     # datan[i]=le.fit_transform(datan[i])
    

datan=data.drop(['Outlet_Establishment_Year','Item_Identifier'],axis=1)
X=datan.values
X[0]


from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(
    [('one_hot_encoder', OneHotEncoder(sparse=False,drop='first'),['Item_Fat_Content','Outlet_Identifier','itemidentifernew'])
,('OrdinalEncoder',OrdinalEncoder(categories='auto'),['Item_Fat_Content','Outlet_Size','Outlet_Location_Type','Outlet_Type'])],   # The column numbers to be transformed (here is [0] but can be [0, 1, 3])
    remainder='passthrough'                                         # Leave the rest of the columns untouched
)

d=ct.fit_transform(datan) 

p=pd.DataFrame(d)
p




from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(
    [('one_hot_encoder', OneHotEncoder(sparse=False,drop='first'),[3,5,10])
,('OrdinalEncoder',OrdinalEncoder(categories='auto'),[1,6,7,8])],   # The column numbers to be transformed (here is [0] but can be [0, 1, 3])
    remainder='passthrough'                                         # Leave the rest of the columns untouched
)

X=ct.fit_transform(X) 

X.shape
Xnew=X[:,0:34]
Ynew=X[:,-1]
Xnew.shape,Ynew.shape


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(Xnew,Ynew,test_size=.2,random_state=42)
print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)


from sklearn import linear_model
from sklearn.metrics import accuracy_score, r2_score, mean_squared_error
from sklearn.model_selection import cross_val_score
from sklearn import cross_validation, metrics
regr = linear_model.LinearRegression()
k=regr.fit(X_train,y_train)

k.score(X_train,y_train)

y_pred=regr.predict(X_test)

from sklearn.metrics import accuracy_score, r2_score, mean_squared_error
r2_score(y_test,y_pred)

plt.scatter(y_test,y_pred)

